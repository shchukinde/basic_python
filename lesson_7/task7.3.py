# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение ( __add__() ), вычитание ( __sub__()) ,
# умножение ( __mul__()) , деление ( __truediv__()) . Данные методы должны применяться т олько
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида * ****\n*****\n*****. .., где количество ячеек между \ n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n** .
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n***** .

class Ceil():
    def __init__(self, size):
        self.size = size

    def __add__(self, other):
        self.size = self.size + other.size
        return self

    def __sub__(self, other):
        ceil_sub = self.size - other.size
        if ceil_sub < 0:
            print("Нельзя вычитать из меньшей клетки большую")
        else:
            self.size = ceil_sub
        return self

    def __mul__(self, other):
        self.size = self.size * other.size
        return self

    def __truediv__(self, other):
        self.size = self.size // other.size
        return self

    def make_order(self, num):
        num_full_rows = self.size // num
        last_row = ''.join([char*(self.size % num) for char in '*'])
        row = ''.join([char*num for char in '*']) + '\n'
        result_str = ''.join(row * num_full_rows) + last_row
        return result_str



cl_1 = Ceil(7)
print(cl_1.make_order(3))
cl_2 = Ceil(3)
cl_3 = cl_1 + cl_2
print("cl_3 = cl_1 + cl_2 = ", cl_3.size)
cl_4 = cl_3 - cl_2
print("cl_4 = cl_3 - cl_2 = ", cl_4.size)
cl_5 = cl_4 * cl_2
print("cl_5 = cl_4 * cl_2 = ", cl_5.size)
cl_6 = cl_5 / cl_2
print("cl_6 = cl_5 / cl_2 = ", cl_6.size)
